%skeleton "lalr1.cc"
%require "3.0.2"

%defines
%define api.namespace {assembler}
%define parser_class_name {Parser}

%define api.token.constructor
%define api.value.type variant
%define parse.assert true

%code requires {
  
  #include "common.h"
  #include "x86/registers.h"
  
  enum class Mode;
  
  struct RegReference
  {
    RegIndex reg;
    Mode mode;
    
    bool is16Bits() const;
  };

  namespace assembler
  {
    class Assembler;
    class Lexer;
  }
}

%lex-param { assembler::Lexer &lexer }
%lex-param { assembler::Assembler &assembler }
%parse-param { assembler::Lexer &lexer }
%parse-param { assembler::Assembler &assembler }

%locations
%initial-action
{
  @$.begin.filename = @$.end.filename = &assembler.file;
};

%define parse.trace
%define parse.error verbose

%code top {
  #include "assembler.h"
  #include "x86lexer.h"
  #include "x86parser.hpp"
  #include "x86/opcodes.h"
  
  static assembler::Parser::symbol_type yylex(assembler::Lexer &scanner, assembler::Assembler &assembler) {
    return scanner.get_next_token();
  }
  

  
  bool RegReference::is16Bits() const { return mode == Mode::BITS16; }


  using namespace assembler;
}

%define api.token.prefix {T_}
%token
  END 0 "end of file"
  EOL "\n"
  COLON ":"
  COMMA ","
  SEMICOL ";"
  LPAREN "("
  RPAREN ")"
  QUOTE "\""
  RBRACK "["
  LBRACK "]"
  LBRACE "{"
  RBRACE "}"
  QUESTION "?"

  ASSIGN "="

  LESS "<"
  LESSEQ "<="
  GREATER ">"
  GREATEREQ ">="
  EQUAL "=="
  NEQUAL "!="

  PLUS "+"
  MINUS "-"
  TIMES "*"
  DIV "/"
  MOD "%"

  INCR "++"
  DECR "--"

  LAND "&&"
  LOR "||"

  RANGE ".."
  FIELD "->"

  VAR "var"

  WHILE "while"
  FOR "for"
  IF "if"
  ELSE "else"
  ELIF "elif"

  VOID_TYPE "void_type"

  MOV "mov"
;

%token <std::string>
  IDENTIFIER "identifier"
  LITERAL "string literal"
;

%token <RegIndex> REG8 "reg8"
%token <RegIndex> REG16 "reg16"
%token <RegIndex> REG32 "reg32"

%type <RegReference> reg16or32 "reg16or32"

%token <u8> OP8 "opcode8"

%token <u32> U32 "integer";
%token <float> FLOAT "float";
%token <bool> BOOL "bool";

/*%type<Expression*> value number
%type<Expression*> expression
%type<Statement*> statement body assignment
%type<Statement*> for_initializer for_iteration
%type<Statement*> variable_declaration
%type<FunDeclaration*> function_declaration

%type<std::list<std::pair<std::string, std::string>>> signature_arguments optional_signature_arguments

%type<std::string> assign_operator

%type<std::list<Expression*>> optional_expression_list expression_list

%type<std::list<Statement*>> statement_list for_statement
%type<std::list<If*>> if_statement

%printer { yyoutput << ""; } <std::list<std::pair<std::string, std::string>>>
%printer { yyoutput << ""; } <std::list<If*>>
%printer { yyoutput << ""; } <std::list<Expression*>>
%printer { yyoutput << ""; } <std::list<Statement*>>*/
%printer { yyoutput << $$; } <*>
%printer { yyoutput << $$.reg << (u8)$$.mode ; } <RegReference>


%nonassoc ELIF
%nonassoc ELSE

//%right QUESTION
//%nonassoc BANG
//%left AND
//%left XOR
//%left OR
%left LOR
%left LAND

%left LESS LESSEQ GREATER GREATEREQ
%left EQUAL NEQUAL
//%left COMP
%left PLUS MINUS
%left TIMES DIV MOD
//%right UMINUS

%%

start:
  instructions
;

instructions:
| instructions instruction { }
| instructions EOL { }
;

instruction:
  OP8 { assembler.emit($1); }
| MOV REG8 COMMA U32 {
    if ($4 > 0xFF || $4 < (s32)0xFF)
      assembler.warning(@1, "byte value exceed bounds");
    
    assembler.emit(OP_MOV_IMM8|$2);
    assembler.emitValue<u8>($4);
}
| MOV reg16or32 COMMA U32 {
    if ($2.mode == Mode::BITS16 && $4 > (u32)0xFFFF)
      assembler.warning(@1, "word value exceed bounds");
      
    assembler.emitOperandPrefix($2.mode);
    assembler.emit(OP_MOV_IMM1632|$2.reg);
    if ($2.is16Bits())
      assembler.emitValue<u16>($4);
    else
      assembler.emitValue<u32>($4);
}
;

reg16or32:
  REG16 { $$ = {$1, Mode::BITS16}; }
| REG32 { $$ = {$1, Mode::BITS32}; }
;

%%

void assembler::Parser::error(const location_type& l, const std::string& m)
{
  assembler.error(l,m);
}
